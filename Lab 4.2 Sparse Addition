//PROGRAM :
#include <stdio.h>

struct Element {
    int row;
    int col;
    int value;
};

void printSparse(struct Element mat[], int size, const char *name) {
    printf("\n%s in Triplet Form:\n", name);
    printf("Row Col Value\n");
    for (int i = 0; i < size; i++) {
        printf("%3d %3d %5d\n", mat[i].row, mat[i].col, mat[i].value);
    }
}

int main() {
    int rows1, cols1, rows2, cols2, n1, n2;

    // Input matrix 1
    printf("Enter number of rows and columns of Matrix A: ");
    scanf("%d %d", &rows1, &cols1);

    printf("Enter number of non-zero elements in Matrix A: ");
    scanf("%d", &n1);

    struct Element A[n1];
    printf("Enter elements for Matrix A (row col value):\n");
    for (int i = 0; i < n1; i++) {
        scanf("%d %d %d", &A[i].row, &A[i].col, &A[i].value);
    }

    // Input matrix 2
    printf("\nEnter number of rows and columns of Matrix B: ");
    scanf("%d %d", &rows2, &cols2);

    if (rows1 != rows2 || cols1 != cols2) {
        printf("Matrix dimensions must match for addition!\n");
        return 1;
    }

    printf("Enter number of non-zero elements in Matrix B: ");
    scanf("%d", &n2);

    struct Element B[n2];
    printf("Enter elements for Matrix B (row col value):\n");
    for (int i = 0; i < n2; i++) {
        scanf("%d %d %d", &B[i].row, &B[i].col, &B[i].value);
    }

    // Resultant matrix
    struct Element result[n1 + n2];
    int i = 0, j = 0, k = 0;

    while (i < n1 && j < n2) {
        int posA = A[i].row * cols1 + A[i].col;
        int posB = B[j].row * cols2 + B[j].col;

        if (posA < posB) {
            result[k++] = A[i++];
        } else if (posA > posB) {
            result[k++] = B[j++];
        } else {
            int sum = A[i].value + B[j].value;
            if (sum != 0) {
                result[k].row = A[i].row;
                result[k].col = A[i].col;
                result[k].value = sum;
                k++;
            }
            i++;
            j++;
        }
    }

    // Add remaining elements
    while (i < n1) result[k++] = A[i++];
    while (j < n2) result[k++] = B[j++];

    // Print all matrices
    printSparse(A, n1, "Matrix A");
    printSparse(B, n2, "Matrix B");
    printSparse(result, k, "Matrix A + B");

    return 0;
}

//OUTPUT :
Enter number of rows and columns of Matrix A: 3 3
Enter number of non-zero elements in Matrix A: 4
Enter elements for Matrix A (row col value):
0 0 6
0 1 7
2 0 8
1 1 8

Enter number of rows and columns of Matrix B: 3 3
Enter number of non-zero elements in Matrix B: 3
Enter elements for Matrix B (row col value):
0 0 8
0 1 5
2 0 1

Matrix A in Triplet Form:
Row Col Value
  0   0     6
  0   1     7
  2   0     8
  1   1     8

Matrix B in Triplet Form:
Row Col Value
  0   0     8
  0   1     5
  2   0     1

Matrix A + B in Triplet Form:
Row Col Value
  0   0    14
  0   1    12
  2   0     9
  1   1     8
